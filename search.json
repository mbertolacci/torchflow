[{"path":"https://mbertolacci.github.io/torchflow/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 torchflow authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mbertolacci.github.io/torchflow/articles/torchflow.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"torchflow","text":"Give mathematical details","code":""},{"path":"https://mbertolacci.github.io/torchflow/articles/torchflow.html","id":"creating-and-sampling-from-a-flow","dir":"Articles","previous_headings":"","what":"Creating and sampling from a flow","title":"torchflow","text":"simple two parameter normalising flow can created follows: flow five layers, alternate affine coupling blocks permutation flows. flow just standard torch nn_module can used usual way: first dimension input acts batch dimension, flow can used generate multiple samples . code actually implements sampling distribution represented flow. can also done directly using generate_from_conditional_flow function:","code":"flow_model <- nn_sequential_conditional_flow(   nn_affine_coupling_block(2),   nn_permutation_flow(2),   nn_affine_coupling_block(2),   nn_permutation_flow(2),   nn_affine_coupling_block(2) ) x <- torch_randn(5, 2) flow_model(x) #> torch_tensor #> -2.0178 -1.4960 #>  0.3793 -0.6574 #> -1.1113  0.5253 #>  0.3948 -0.6395 #> -0.7334 -0.7105 #> [ CPUFloatType{5,2} ][ grad_fn = <CatBackward0> ] generate_from_conditional_flow(flow_model, 5) #> torch_tensor #>  0.9804  0.6803 #> -1.2865 -0.8555 #>  1.6147 -0.1594 #>  0.2197  0.6862 #> -0.5802 -0.4252 #> [ CPUFloatType{5,2} ][ grad_fn = <ReshapeAliasBackward0> ]"},{"path":"https://mbertolacci.github.io/torchflow/articles/torchflow.html","id":"conditional-flow","dir":"Articles","previous_headings":"","what":"Conditional flow","title":"torchflow","text":"conditional flow takes additional input, conditioning variable, can used condition samples additional information. flow therefore encodes conditional distribution. following code creates conditional flow architecture unconditional flow defined additional conditioning variable dimension 3: can sample flow given conditioning variable follows: can also batch conditioning variables:","code":"conditioned_flow_model <- nn_sequential_conditional_flow(   nn_affine_coupling_block(2, 3),   nn_permutation_flow(2),   nn_affine_coupling_block(2, 3) ) conditioning <- torch_randn(3) generate_from_conditional_flow(conditioned_flow_model, 5, conditioning) #> torch_tensor #> -0.7189  1.8161 #>  0.8359  0.4614 #> -0.9923 -0.6559 #>  0.5984  0.3590 #>  0.5166  1.3128 #> [ CPUFloatType{5,2} ][ grad_fn = <ReshapeAliasBackward0> ] conditioning <- torch_randn(8, 3) generate_from_conditional_flow(conditioned_flow_model, 5, conditioning) #> torch_tensor #> (1,.,.) =  #>  -0.1008  0.2967 #>   0.4309 -1.2915 #>  -1.1181  2.9693 #>   1.0227  0.1395 #>   1.6540 -1.4784 #>   0.4895  3.2963 #>   1.4602 -3.2114 #>   1.2909 -0.8189 #>  #> (2,.,.) =  #>  -0.2814  0.3192 #>   0.4173  0.6105 #>   0.5586 -1.5017 #>  -0.8702  0.4455 #>  -0.9377 -0.3605 #>   0.6868  0.8969 #>   0.8247 -1.9141 #>   1.3632 -2.1151 #>  #> (3,.,.) =  #>   0.9788 -0.9426 #>  -0.0651 -1.5416 #>   0.0917 -0.8242 #>  -0.0164 -0.9473 #>   0.1918  0.1510 #>   0.0165  0.4333 #>  -1.0102 -0.4338 #>  -0.2813 -1.4311 #>  #> ... [the output was truncated (use n=-1 to disable)] #> [ CPUFloatType{5,8,2} ][ grad_fn = <ReshapeAliasBackward0> ]"},{"path":"https://mbertolacci.github.io/torchflow/articles/torchflow.html","id":"training-an-unconditional-flow","dir":"Articles","previous_headings":"","what":"Training an unconditional flow","title":"torchflow","text":"flows randomly initialised, samples follow interesting distribution. can instead train flow follow given distribution using samples distribution. Let us train flow match following distribution σ∼N+(0,1)\\sigma \\sim N^+(0, 1), μ∼N(0,σ2)\\mu \\sim N(0, \\sigma^2), N+(0,1)N^+(0, 1) half normal distribution mean 0 standard deviation 1. can generate samples distribution follows: function can used train flow match distribution using train_conditional_flow function: looks though test loss converged. can sample trained flow follows compare samples test set:  looks like reasonable approximation target distribution. can also look marginal histograms:  look okay.","code":"generate_samples <- function(...) {   n_samples <- 1024   sigma <- torch_abs(torch_randn(n_samples))   mu <- torch_randn(n_samples) * sigma   list(target = torch_stack(list(mu, sigma), 2)) }  generate_samples() #> $target #> torch_tensor #> -1.8881e-01  1.7712e-01 #> -8.4829e-01  1.0475e+00 #>  4.7472e-01  9.8554e-01 #> -1.2531e-01  5.9280e-01 #>  2.3119e-01  7.0690e-01 #> -9.0245e-02  9.2628e-02 #> -4.8170e-02  3.2608e-01 #> -4.7820e-02  3.8068e-02 #> -2.7721e-01  2.3289e-01 #>  1.6327e-01  3.2974e-01 #> -1.0708e+00  1.2265e+00 #> -7.5380e-01  9.2153e-01 #>  4.8917e-01  9.9006e-01 #>  1.3885e-02  4.1768e-01 #> -1.2011e+00  1.7076e+00 #> -7.4892e-03  7.4693e-01 #>  3.9637e-01  4.0357e-01 #> -4.3759e-01  1.6611e+00 #> -3.9776e-01  3.9934e-01 #>  2.3063e+00  1.2947e+00 #> -9.6706e-02  5.2438e-01 #>  1.3090e-01  8.3865e-01 #> -3.3930e-02  1.2883e-01 #> -2.9707e-01  8.9152e-01 #>  7.4267e-01  1.1123e+00 #> -1.2987e+00  6.8997e-01 #> -1.8541e-01  3.4257e-01 #> -6.8271e-03  3.8840e-02 #>  1.9186e+00  2.9484e+00 #>  2.7008e-01  6.7360e-01 #> ... [the output was truncated (use n=-1 to disable)] #> [ CPUFloatType{1024,2} ] test_set <- generate_samples() train_conditional_flow(   flow_model,   generate_samples,   n_epochs = 32,   batch_size = 256,   after_epoch = function(...) {     test_loss <- as_array(forward_kl_loss(flow_model(test_set$target)))     cat('Test loss:', test_loss, '\\n')   } ) #> = Starting epoch 1  #> Test loss: 0.5862492  #> = Starting epoch 2  #> Test loss: 0.2409683  #> = Starting epoch 3  #> Test loss: 0.2004716  #> = Starting epoch 4  #> Test loss: 0.1104257  #> = Starting epoch 5  #> Test loss: 0.02992833  #> = Starting epoch 6  #> Test loss: 0.000531435  #> = Starting epoch 7  #> Test loss: -0.01489806  #> = Starting epoch 8  #> Test loss: -0.02839589  #> = Starting epoch 9  #> Test loss: 0.02905035  #> = Starting epoch 10  #> Test loss: -0.05562449  #> = Starting epoch 11  #> Test loss: -0.08051836  #> = Starting epoch 12  #> Test loss: -0.06131625  #> = Starting epoch 13  #> Test loss: -0.07351124  #> = Starting epoch 14  #> Test loss: -0.1031467  #> = Starting epoch 15  #> Test loss: -0.09354901  #> = Starting epoch 16  #> Test loss: -0.08434463  #> = Starting epoch 17  #> Test loss: -0.08468318  #> = Starting epoch 18  #> Test loss: -0.04799163  #> = Starting epoch 19  #> Test loss: -0.09043062  #> = Starting epoch 20  #> Test loss: -0.08780885  #> = Starting epoch 21  #> Test loss: -0.09208864  #> = Starting epoch 22  #> Test loss: -0.1083008  #> = Starting epoch 23  #> Test loss: -0.1252874  #> = Starting epoch 24  #> Test loss: -0.136501  #> = Starting epoch 25  #> Test loss: -0.1409723  #> = Starting epoch 26  #> Test loss: -0.1234826  #> = Starting epoch 27  #> Test loss: -0.1158825  #> = Starting epoch 28  #> Test loss: -0.08270192  #> = Starting epoch 29  #> Test loss: -0.1246806  #> = Starting epoch 30  #> Test loss: -0.1134737  #> = Starting epoch 31  #> Test loss: -0.1238683  #> = Starting epoch 32  #> Test loss: -0.1231228 test_samples <- generate_from_conditional_flow(flow_model, 1024) plot(as_array(test_set$target), xlab = 'mu', ylab = 'sigma') points(as_array(test_samples), col = 'red') par(mfrow = c(2, 2)) hist(as_array(test_set$target[, 1]), main = 'Target', xlab = 'mu', freq = FALSE, breaks = 32) hist(as_array(test_samples[, 1]), main = 'Samples', xlab = 'mu', freq = FALSE, breaks = 32) hist(as_array(test_set$target[, 2]), main = 'Target', xlab = 'sigma', freq = FALSE, breaks = 32) hist(as_array(test_samples[, 2]), main = 'Samples', xlab = 'sigma', freq = FALSE, breaks = 32)"},{"path":"https://mbertolacci.github.io/torchflow/articles/torchflow.html","id":"training-a-conditional-flow","dir":"Articles","previous_headings":"","what":"Training a conditional flow","title":"torchflow","text":"process training conditional flow unconditional flow, except generate function now also returns conditioning variable. Let’s add conditioning variable, y∼N(μ,σ2)y \\sim N(\\mu, \\sigma^2), four replicates: can generate samples trained flow follows, now samples conditioned values yy:  can also plot samples scatter plot:  Compare MCMC","code":"generate_conditional_samples <- function(...) {   n_samples <- 1024   sigma <- torch_abs(torch_randn(n_samples))   mu <- torch_randn(n_samples) * sigma   y <- torch_unsqueeze(mu, 2) + torch_randn(n_samples, 4) * torch_unsqueeze(sigma, 2)   list(     target = torch_stack(list(mu, sigma), 2),     conditioning = y   ) }  conditioning_flow <- nn_sequential_conditional_flow(   nn_affine_coupling_block(2, 4),   nn_permutation_flow(2),   nn_affine_coupling_block(2, 4),   nn_permutation_flow(2),   nn_affine_coupling_block(2, 4) )  test_set <- generate_conditional_samples() str(test_set) #> List of 2 #>  $ target      :Float [1:1024, 1:2] #>  $ conditioning:Float [1:1024, 1:4] train_conditional_flow(   conditioning_flow,   generate_conditional_samples,   n_epochs = 128,   batch_size = 256,   after_epoch = function(...) {     test_loss <- as_array(forward_kl_loss(conditioning_flow(test_set$target, test_set$conditioning)))     cat('Test loss:', test_loss, '\\n')   } ) #> = Starting epoch 1  #> Test loss: 0.3167583  #> = Starting epoch 2  #> Test loss: -0.1159361  #> = Starting epoch 3  #> Test loss: -0.2773705  #> = Starting epoch 4  #> Test loss: -0.5068901  #> = Starting epoch 5  #> Test loss: -0.4864008  #> = Starting epoch 6  #> Test loss: -0.7215546  #> = Starting epoch 7  #> Test loss: -0.8669652  #> = Starting epoch 8  #> Test loss: -1.005953  #> = Starting epoch 9  #> Test loss: -1.02161  #> = Starting epoch 10  #> Test loss: -1.149234  #> = Starting epoch 11  #> Test loss: -1.24641  #> = Starting epoch 12  #> Test loss: -1.301232  #> = Starting epoch 13  #> Test loss: -1.332698  #> = Starting epoch 14  #> Test loss: -1.364789  #> = Starting epoch 15  #> Test loss: -1.40593  #> = Starting epoch 16  #> Test loss: -1.411019  #> = Starting epoch 17  #> Test loss: -1.432955  #> = Starting epoch 18  #> Test loss: -1.477993  #> = Starting epoch 19  #> Test loss: -1.465605  #> = Starting epoch 20  #> Test loss: -1.496032  #> = Starting epoch 21  #> Test loss: -1.5272  #> = Starting epoch 22  #> Test loss: -1.538098  #> = Starting epoch 23  #> Test loss: -1.522683  #> = Starting epoch 24  #> Test loss: -1.57289  #> = Starting epoch 25  #> Test loss: -1.580281  #> = Starting epoch 26  #> Test loss: -1.606598  #> = Starting epoch 27  #> Test loss: -1.625886  #> = Starting epoch 28  #> Test loss: -1.630935  #> = Starting epoch 29  #> Test loss: -1.630473  #> = Starting epoch 30  #> Test loss: -1.637126  #> = Starting epoch 31  #> Test loss: -1.669098  #> = Starting epoch 32  #> Test loss: -1.686348  #> = Starting epoch 33  #> Test loss: -1.695492  #> = Starting epoch 34  #> Test loss: -1.696169  #> = Starting epoch 35  #> Test loss: -1.733778  #> = Starting epoch 36  #> Test loss: -1.735561  #> = Starting epoch 37  #> Test loss: -1.7455  #> = Starting epoch 38  #> Test loss: -1.759314  #> = Starting epoch 39  #> Test loss: -1.781526  #> = Starting epoch 40  #> Test loss: -1.76952  #> = Starting epoch 41  #> Test loss: -1.778879  #> = Starting epoch 42  #> Test loss: -1.798119  #> = Starting epoch 43  #> Test loss: -1.795295  #> = Starting epoch 44  #> Test loss: -1.796699  #> = Starting epoch 45  #> Test loss: -1.815355  #> = Starting epoch 46  #> Test loss: -1.78971  #> = Starting epoch 47  #> Test loss: -1.794  #> = Starting epoch 48  #> Test loss: -1.820461  #> = Starting epoch 49  #> Test loss: -1.818464  #> = Starting epoch 50  #> Test loss: -1.794643  #> = Starting epoch 51  #> Test loss: -1.821975  #> = Starting epoch 52  #> Test loss: -1.825165  #> = Starting epoch 53  #> Test loss: -1.827541  #> = Starting epoch 54  #> Test loss: -1.838861  #> = Starting epoch 55  #> Test loss: -1.838138  #> = Starting epoch 56  #> Test loss: -1.830242  #> = Starting epoch 57  #> Test loss: -1.852008  #> = Starting epoch 58  #> Test loss: -1.862697  #> = Starting epoch 59  #> Test loss: -1.870507  #> = Starting epoch 60  #> Test loss: -1.880555  #> = Starting epoch 61  #> Test loss: -1.867749  #> = Starting epoch 62  #> Test loss: -1.855548  #> = Starting epoch 63  #> Test loss: -1.855316  #> = Starting epoch 64  #> Test loss: -1.844695  #> = Starting epoch 65  #> Test loss: -1.878601  #> = Starting epoch 66  #> Test loss: -1.871429  #> = Starting epoch 67  #> Test loss: -1.857456  #> = Starting epoch 68  #> Test loss: -1.852748  #> = Starting epoch 69  #> Test loss: -1.869741  #> = Starting epoch 70  #> Test loss: -1.895523  #> = Starting epoch 71  #> Test loss: -1.874897  #> = Starting epoch 72  #> Test loss: -1.886105  #> = Starting epoch 73  #> Test loss: -1.899364  #> = Starting epoch 74  #> Test loss: -1.899599  #> = Starting epoch 75  #> Test loss: -1.890722  #> = Starting epoch 76  #> Test loss: -1.887225  #> = Starting epoch 77  #> Test loss: -1.909096  #> = Starting epoch 78  #> Test loss: -1.886747  #> = Starting epoch 79  #> Test loss: -1.901926  #> = Starting epoch 80  #> Test loss: -1.884874  #> = Starting epoch 81  #> Test loss: -1.858256  #> = Starting epoch 82  #> Test loss: -1.890961  #> = Starting epoch 83  #> Test loss: -1.931304  #> = Starting epoch 84  #> Test loss: -1.921447  #> = Starting epoch 85  #> Test loss: -1.917051  #> = Starting epoch 86  #> Test loss: -1.893662  #> = Starting epoch 87  #> Test loss: -1.908622  #> = Starting epoch 88  #> Test loss: -1.937948  #> = Starting epoch 89  #> Test loss: -1.926077  #> = Starting epoch 90  #> Test loss: -1.935227  #> = Starting epoch 91  #> Test loss: -1.929689  #> = Starting epoch 92  #> Test loss: -1.918764  #> = Starting epoch 93  #> Test loss: -1.936955  #> = Starting epoch 94  #> Test loss: -1.930477  #> = Starting epoch 95  #> Test loss: -1.929337  #> = Starting epoch 96  #> Test loss: -1.926376  #> = Starting epoch 97  #> Test loss: -1.900794  #> = Starting epoch 98  #> Test loss: -1.931854  #> = Starting epoch 99  #> Test loss: -1.924521  #> = Starting epoch 100  #> Test loss: -1.936015  #> = Starting epoch 101  #> Test loss: -1.927884  #> = Starting epoch 102  #> Test loss: -1.943086  #> = Starting epoch 103  #> Test loss: -1.923344  #> = Starting epoch 104  #> Test loss: -1.920458  #> = Starting epoch 105  #> Test loss: -1.948606  #> = Starting epoch 106  #> Test loss: -1.94913  #> = Starting epoch 107  #> Test loss: -1.947763  #> = Starting epoch 108  #> Test loss: -1.93758  #> = Starting epoch 109  #> Test loss: -1.935313  #> = Starting epoch 110  #> Test loss: -1.957002  #> = Starting epoch 111  #> Test loss: -1.938019  #> = Starting epoch 112  #> Test loss: -1.935993  #> = Starting epoch 113  #> Test loss: -1.953185  #> = Starting epoch 114  #> Test loss: -1.956374  #> = Starting epoch 115  #> Test loss: -1.926515  #> = Starting epoch 116  #> Test loss: -1.941759  #> = Starting epoch 117  #> Test loss: -1.919891  #> = Starting epoch 118  #> Test loss: -1.93939  #> = Starting epoch 119  #> Test loss: -1.960368  #> = Starting epoch 120  #> Test loss: -1.959556  #> = Starting epoch 121  #> Test loss: -1.945351  #> = Starting epoch 122  #> Test loss: -1.954203  #> = Starting epoch 123  #> Test loss: -1.948341  #> = Starting epoch 124  #> Test loss: -1.934356  #> = Starting epoch 125  #> Test loss: -1.934342  #> = Starting epoch 126  #> Test loss: -1.933105  #> = Starting epoch 127  #> Test loss: -1.928184  #> = Starting epoch 128  #> Test loss: -1.898762 # Generate 1024 samples for each of the first 4 conditioning variables in the test set test_samples <- as_array(generate_from_conditional_flow(conditioning_flow, 1024, test_set$conditioning[1 : 4, ]))  par(mfrow = c(4, 2)) for (i in 1 : 4) {   hist(test_samples[, i, 1], main = '', xlab = 'mu', freq = FALSE, breaks = 32, xlim = c(-3, 3))   abline(v = as_array(test_set$conditioning[i, ]), col = 'blue')   abline(v = as_array(test_set$target[i, 1]), col = 'red')   hist(test_samples[, i, 2], main = '', xlab = 'sigma', freq = FALSE, breaks = 32, xlim = c(0, 3))   abline(v = as_array(test_set$target[i, 2]), col = 'red') } par(mfrow = c(2, 2)) for (i in 1 : 4) {   plot(test_samples[, i, 1], test_samples[, i, 2], main = '', xlab = 'mu', ylab = 'sigma', xlim = c(-3, 3), ylim = c(0, 3))   abline(v = as_array(test_set$target[i, 1]), col = 'red')   abline(h = as_array(test_set$target[i, 2]), col = 'red') }"},{"path":"https://mbertolacci.github.io/torchflow/articles/torchflow.html","id":"using-a-summarizing-network","dir":"Articles","previous_headings":"","what":"Using a summarizing network","title":"torchflow","text":"example, conditioning variable y contains four replicates conditioning variable. ignored fact replicates, trained flow though dependent. can instead use summarizing network individually processes individual replicate set summary statistics, combine summary statistics permutation invariant way form conditioning variable. example summarizing network: can combine summarizing network flow nn_summarizing_conditional_flow object: Let’s also expand number replicated observations 32: Let’s train model: can generate samples trained model :  can also plot samples scatter plot:","code":"summarizing_network <- nn_module(   initialize = function() {     self$summary_head <- nn_sequential(       nn_linear(1, 32),       nn_relu(),       nn_linear(32, 32),       nn_relu(),       nn_linear(32, 8),     )   },   forward = function(y) {     summaries <- self$summary_head(torch_unsqueeze(y, -1))     torch_sum(summaries, -2)   } )  summary_model <- summarizing_network() summary_model(torch_randn(5, 4)) #> torch_tensor #>  0.2815 -0.2662  0.9925 -0.1186  0.8577 -0.0014 -0.3456 -0.7380 #>  0.4268 -0.1651  0.9370 -0.4850  0.7501  0.0374 -0.2860 -0.7024 #>  0.4942 -0.0787  0.9539 -0.7611  0.9286 -0.0048 -0.3562 -0.6684 #>  0.4888 -0.0824  0.8690 -0.6768  0.6279  0.0576 -0.1822 -0.6177 #>  0.3988 -0.1583  0.8818 -0.4014  0.6288  0.0498 -0.1521 -0.5955 #> [ CPUFloatType{5,8} ][ grad_fn = <SumBackward1> ] flow_model <- nn_sequential_conditional_flow(   nn_affine_coupling_block(2, 8),   nn_permutation_flow(2),   nn_affine_coupling_block(2, 8),   nn_permutation_flow(2),   nn_affine_coupling_block(2, 8) ) conditioning_flow <- nn_summarizing_conditional_flow(summary_model, flow_model) generate_conditional_samples <- function(...) {   n_samples <- 1024   sigma <- torch_abs(torch_randn(n_samples))   mu <- torch_randn(n_samples) * sigma   y <- torch_unsqueeze(mu, 2) + torch_randn(n_samples, 32) * torch_unsqueeze(sigma, 2)   list(     target = torch_stack(list(mu, sigma), 2),     conditioning = y   ) } test_set <- generate_conditional_samples() str(test_set) #> List of 2 #>  $ target      :Float [1:1024, 1:2] #>  $ conditioning:Float [1:1024, 1:32] train_conditional_flow(   conditioning_flow,   generate_conditional_samples,   n_epochs = 128,   batch_size = 256,   after_epoch = function(...) {     test_loss <- as_array(forward_kl_loss(conditioning_flow(test_set$target, test_set$conditioning)))     cat('Test loss:', test_loss, '\\n')   } ) #> = Starting epoch 1  #> Test loss: -0.8367912  #> = Starting epoch 2  #> Test loss: -1.694922  #> = Starting epoch 3  #> Test loss: -2.304892  #> = Starting epoch 4  #> Test loss: -2.642195  #> = Starting epoch 5  #> Test loss: -2.939631  #> = Starting epoch 6  #> Test loss: -2.881653  #> = Starting epoch 7  #> Test loss: -3.132473  #> = Starting epoch 8  #> Test loss: -3.19017  #> = Starting epoch 9  #> Test loss: -3.386059  #> = Starting epoch 10  #> Test loss: -3.26691  #> = Starting epoch 11  #> Test loss: -3.388417  #> = Starting epoch 12  #> Test loss: -3.289789  #> = Starting epoch 13  #> Test loss: -3.413084  #> = Starting epoch 14  #> Test loss: -3.36389  #> = Starting epoch 15  #> Test loss: -3.537968  #> = Starting epoch 16  #> Test loss: -3.516668  #> = Starting epoch 17  #> Test loss: -3.535358  #> = Starting epoch 18  #> Test loss: -3.416577  #> = Starting epoch 19  #> Test loss: -3.438516  #> = Starting epoch 20  #> Test loss: -3.525167  #> = Starting epoch 21  #> Test loss: -3.554286  #> = Starting epoch 22  #> Test loss: -3.576441  #> = Starting epoch 23  #> Test loss: -3.403073  #> = Starting epoch 24  #> Test loss: -3.49591  #> = Starting epoch 25  #> Test loss: -3.468795  #> = Starting epoch 26  #> Test loss: -3.599305  #> = Starting epoch 27  #> Test loss: -3.609666  #> = Starting epoch 28  #> Test loss: -3.640299  #> = Starting epoch 29  #> Test loss: -3.646099  #> = Starting epoch 30  #> Test loss: -3.604927  #> = Starting epoch 31  #> Test loss: -3.568574  #> = Starting epoch 32  #> Test loss: -3.709035  #> = Starting epoch 33  #> Test loss: -3.730598  #> = Starting epoch 34  #> Test loss: -3.707072  #> = Starting epoch 35  #> Test loss: -3.539743  #> = Starting epoch 36  #> Test loss: -3.615879  #> = Starting epoch 37  #> Test loss: -3.584281  #> = Starting epoch 38  #> Test loss: -3.582735  #> = Starting epoch 39  #> Test loss: -3.654865  #> = Starting epoch 40  #> Test loss: -3.611195  #> = Starting epoch 41  #> Test loss: -3.679406  #> = Starting epoch 42  #> Test loss: -3.712811  #> = Starting epoch 43  #> Test loss: -3.73088  #> = Starting epoch 44  #> Test loss: -3.759998  #> = Starting epoch 45  #> Test loss: -3.668653  #> = Starting epoch 46  #> Test loss: -3.723764  #> = Starting epoch 47  #> Test loss: -3.715869  #> = Starting epoch 48  #> Test loss: -3.730113  #> = Starting epoch 49  #> Test loss: -3.719208  #> = Starting epoch 50  #> Test loss: -3.599456  #> = Starting epoch 51  #> Test loss: -3.775639  #> = Starting epoch 52  #> Test loss: -3.728826  #> = Starting epoch 53  #> Test loss: -3.675586  #> = Starting epoch 54  #> Test loss: -3.711995  #> = Starting epoch 55  #> Test loss: -3.755214  #> = Starting epoch 56  #> Test loss: -3.792794  #> = Starting epoch 57  #> Test loss: -3.544078  #> = Starting epoch 58  #> Test loss: -3.672584  #> = Starting epoch 59  #> Test loss: -3.747003  #> = Starting epoch 60  #> Test loss: -3.717328  #> = Starting epoch 61  #> Test loss: -3.735707  #> = Starting epoch 62  #> Test loss: -3.694315  #> = Starting epoch 63  #> Test loss: -3.716728  #> = Starting epoch 64  #> Test loss: -3.780815  #> = Starting epoch 65  #> Test loss: -3.807038  #> = Starting epoch 66  #> Test loss: -3.643558  #> = Starting epoch 67  #> Test loss: -3.723726  #> = Starting epoch 68  #> Test loss: -3.713706  #> = Starting epoch 69  #> Test loss: -3.751275  #> = Starting epoch 70  #> Test loss: -3.786514  #> = Starting epoch 71  #> Test loss: -3.75527  #> = Starting epoch 72  #> Test loss: -3.784166  #> = Starting epoch 73  #> Test loss: -3.848963  #> = Starting epoch 74  #> Test loss: -3.663097  #> = Starting epoch 75  #> Test loss: -3.678927  #> = Starting epoch 76  #> Test loss: -3.75996  #> = Starting epoch 77  #> Test loss: -3.699849  #> = Starting epoch 78  #> Test loss: -3.794611  #> = Starting epoch 79  #> Test loss: -3.749585  #> = Starting epoch 80  #> Test loss: -3.802366  #> = Starting epoch 81  #> Test loss: -3.856399  #> = Starting epoch 82  #> Test loss: -3.829741  #> = Starting epoch 83  #> Test loss: -3.844468  #> = Starting epoch 84  #> Test loss: -3.756834  #> = Starting epoch 85  #> Test loss: -3.702025  #> = Starting epoch 86  #> Test loss: -3.790216  #> = Starting epoch 87  #> Test loss: -3.771896  #> = Starting epoch 88  #> Test loss: -3.807837  #> = Starting epoch 89  #> Test loss: -3.871547  #> = Starting epoch 90  #> Test loss: -3.730771  #> = Starting epoch 91  #> Test loss: -3.819907  #> = Starting epoch 92  #> Test loss: -3.829044  #> = Starting epoch 93  #> Test loss: -3.786312  #> = Starting epoch 94  #> Test loss: -3.760784  #> = Starting epoch 95  #> Test loss: -3.848081  #> = Starting epoch 96  #> Test loss: -3.788598  #> = Starting epoch 97  #> Test loss: -3.73484  #> = Starting epoch 98  #> Test loss: -3.790667  #> = Starting epoch 99  #> Test loss: -3.860159  #> = Starting epoch 100  #> Test loss: -3.834702  #> = Starting epoch 101  #> Test loss: -3.885662  #> = Starting epoch 102  #> Test loss: -3.810224  #> = Starting epoch 103  #> Test loss: -3.827204  #> = Starting epoch 104  #> Test loss: -3.654989  #> = Starting epoch 105  #> Test loss: -3.796481  #> = Starting epoch 106  #> Test loss: -3.787138  #> = Starting epoch 107  #> Test loss: -3.780945  #> = Starting epoch 108  #> Test loss: -3.655359  #> = Starting epoch 109  #> Test loss: -3.809875  #> = Starting epoch 110  #> Test loss: -3.791577  #> = Starting epoch 111  #> Test loss: -3.76792  #> = Starting epoch 112  #> Test loss: -3.753139  #> = Starting epoch 113  #> Test loss: -3.812123  #> = Starting epoch 114  #> Test loss: -3.770524  #> = Starting epoch 115  #> Test loss: -3.726142  #> = Starting epoch 116  #> Test loss: -3.736482  #> = Starting epoch 117  #> Test loss: -3.610758  #> = Starting epoch 118  #> Test loss: -3.802378  #> = Starting epoch 119  #> Test loss: -3.792809  #> = Starting epoch 120  #> Test loss: -3.776208  #> = Starting epoch 121  #> Test loss: -3.784744  #> = Starting epoch 122  #> Test loss: -3.740324  #> = Starting epoch 123  #> Test loss: -3.785519  #> = Starting epoch 124  #> Test loss: -3.773418  #> = Starting epoch 125  #> Test loss: -3.824366  #> = Starting epoch 126  #> Test loss: -3.871953  #> = Starting epoch 127  #> Test loss: -3.732903  #> = Starting epoch 128  #> Test loss: -3.576988 # Generate 1024 samples for each of the first 4 conditioning variables in the test set test_samples <- as_array(generate_from_conditional_flow(conditioning_flow, 1024, test_set$conditioning[1 : 4, ]))  par(mfrow = c(4, 2)) for (i in 1 : 4) {   hist(test_samples[, i, 1], main = '', xlab = 'mu', freq = FALSE, breaks = 32, xlim = c(-3, 3))   abline(v = as_array(test_set$target[i, 1]), col = 'red')   hist(test_samples[, i, 2], main = '', xlab = 'sigma', freq = FALSE, breaks = 32, xlim = c(0, 3))   abline(v = as_array(test_set$target[i, 2]), col = 'red') } par(mfrow = c(2, 2)) for (i in 1 : 4) {   plot(test_samples[, i, 1], test_samples[, i, 2], main = '', xlab = 'mu', ylab = 'sigma', xlim = c(-3, 3), ylim = c(0, 3))   abline(v = as_array(test_set$target[i, 1]), col = 'red')   abline(h = as_array(test_set$target[i, 2]), col = 'red') }"},{"path":"https://mbertolacci.github.io/torchflow/articles/torchflow.html","id":"more-complex-conditioning-variables","dir":"Articles","previous_headings":"","what":"More complex conditioning variables","title":"torchflow","text":"summarizing network key using complex conditioning variables. example, can use 2D grid points conditioning variable, processed summarizing network set summary statistics used conditioning variable flow. 2-D grid, convolutional network conventional choice often works well practice. following example generates data using exponential covariance unknown variance length scale 16x16 2-D grid:  can now create summarizing network conditioning variable. convolutional network conventional choice type data. network alternates convolution, ReLU max pooling layers, final adaptive average pooling layer reduce summary statistics fixed size vector dimension 32 (number summary statistics used flow): can now create conditional flow summarizing network: can now train model : can now generate samples trained model:  can also plot samples scatter plot:","code":"n_grid <- 16 x_y_grid <- as.matrix(expand.grid(   x = seq(0, 1, length.out = n_grid),   y = seq(0, 1, length.out = n_grid) )) distances <- torch_tensor(as.matrix(dist(x_y_grid)))  generate_conditional_samples <- function(...) {   n_samples <- 1024   ell <- 0.1 + 1.9 * torch_rand(n_samples)   sigma <- torch_abs(torch_randn(n_samples))    Sigma <- torch_square(sigma)$unsqueeze(-1)$unsqueeze(-1) * torch_exp(-torch_unsqueeze(distances, 1) / ell$unsqueeze(-1)$unsqueeze(-1))   L <- linalg_cholesky(Sigma)   y_flat <- torch_matmul(L, torch_randn(n_samples, 256, 1))   # The extra 1 here is interpreted as a single channel   y <- torch_reshape(y_flat, c(n_samples, 1, n_grid, n_grid))    list(     # We log the parameters to ensure they have real support;     # this is not strictly necessary for the flow to work, but it     # does make it easier to match the distribution     target = torch_log(torch_stack(list(ell, sigma), 2)),     conditioning = y   ) }  test_set <- generate_conditional_samples() par(mfrow = c(2, 2)) for (i in 1 : 4) {   image(as_array(test_set$conditioning[i, 1, , ]), main = '', xlab = 'x', ylab = 'y') } summary_model <- nn_sequential(   nn_conv2d(1, 16, 3, padding = 1),   nn_relu(),   nn_max_pool2d(2),   nn_conv2d(16, 32, 3, padding = 1),   nn_relu(),   nn_adaptive_avg_pool2d(1),   nn_flatten() )  str(summary_model(test_set$conditioning[1 : 10, , , drop = FALSE])) #> Float [1:10, 1:32] flow_model <- nn_sequential_conditional_flow(   nn_affine_coupling_block(2, 32),   nn_permutation_flow(2),   nn_affine_coupling_block(2, 32),   nn_permutation_flow(2),   nn_affine_coupling_block(2, 32) ) conditioning_flow <- nn_summarizing_conditional_flow(summary_model, flow_model) train_conditional_flow(   conditioning_flow,   generate_conditional_samples,   n_epochs = 128,   batch_size = 1024,   after_epoch = function(...) {     test_loss <- as_array(forward_kl_loss(conditioning_flow(test_set$target, test_set$conditioning)))     cat('Test loss:', test_loss, '\\n')   } ) #> = Starting epoch 1  #> Test loss: 0.9412317  #> = Starting epoch 2  #> Test loss: 0.8611785  #> = Starting epoch 3  #> Test loss: 0.8057207  #> = Starting epoch 4  #> Test loss: 0.765202  #> = Starting epoch 5  #> Test loss: 0.7257105  #> = Starting epoch 6  #> Test loss: 0.6752622  #> = Starting epoch 7  #> Test loss: 0.6098464  #> = Starting epoch 8  #> Test loss: 0.5364605  #> = Starting epoch 9  #> Test loss: 0.4587261  #> = Starting epoch 10  #> Test loss: 0.3803186  #> = Starting epoch 11  #> Test loss: 0.3030946  #> = Starting epoch 12  #> Test loss: 0.2290463  #> = Starting epoch 13  #> Test loss: 0.1606649  #> = Starting epoch 14  #> Test loss: 0.08941054  #> = Starting epoch 15  #> Test loss: 0.0004091263  #> = Starting epoch 16  #> Test loss: -0.09145355  #> = Starting epoch 17  #> Test loss: -0.1658343  #> = Starting epoch 18  #> Test loss: -0.2396588  #> = Starting epoch 19  #> Test loss: -0.3132227  #> = Starting epoch 20  #> Test loss: -0.3810406  #> = Starting epoch 21  #> Test loss: -0.4412934  #> = Starting epoch 22  #> Test loss: -0.3828038  #> = Starting epoch 23  #> Test loss: -0.492142  #> = Starting epoch 24  #> Test loss: -0.2697502  #> = Starting epoch 25  #> Test loss: -0.4082263  #> = Starting epoch 26  #> Test loss: -0.6073453  #> = Starting epoch 27  #> Test loss: -0.5823941  #> = Starting epoch 28  #> Test loss: -0.6748881  #> = Starting epoch 29  #> Test loss: -0.7139421  #> = Starting epoch 30  #> Test loss: -0.6825187  #> = Starting epoch 31  #> Test loss: -0.7179837  #> = Starting epoch 32  #> Test loss: -0.8439382  #> = Starting epoch 33  #> Test loss: -0.8771277  #> = Starting epoch 34  #> Test loss: -0.916661  #> = Starting epoch 35  #> Test loss: -0.9916899  #> = Starting epoch 36  #> Test loss: -0.9749817  #> = Starting epoch 37  #> Test loss: -1.015241  #> = Starting epoch 38  #> Test loss: -1.111773  #> = Starting epoch 39  #> Test loss: -1.12201  #> = Starting epoch 40  #> Test loss: -1.182854  #> = Starting epoch 41  #> Test loss: -1.165089  #> = Starting epoch 42  #> Test loss: -1.230131  #> = Starting epoch 43  #> Test loss: -1.226677  #> = Starting epoch 44  #> Test loss: -1.28291  #> = Starting epoch 45  #> Test loss: -1.296845  #> = Starting epoch 46  #> Test loss: -1.331869  #> = Starting epoch 47  #> Test loss: -1.401999  #> = Starting epoch 48  #> Test loss: -1.436154  #> = Starting epoch 49  #> Test loss: -1.469524  #> = Starting epoch 50  #> Test loss: -1.476093  #> = Starting epoch 51  #> Test loss: -1.542227  #> = Starting epoch 52  #> Test loss: -1.537428  #> = Starting epoch 53  #> Test loss: -1.581504  #> = Starting epoch 54  #> Test loss: -1.617259  #> = Starting epoch 55  #> Test loss: -1.627078  #> = Starting epoch 56  #> Test loss: -1.70936  #> = Starting epoch 57  #> Test loss: -1.719328  #> = Starting epoch 58  #> Test loss: -1.726416  #> = Starting epoch 59  #> Test loss: -1.734672  #> = Starting epoch 60  #> Test loss: -1.726456  #> = Starting epoch 61  #> Test loss: -1.744527  #> = Starting epoch 62  #> Test loss: -1.748785  #> = Starting epoch 63  #> Test loss: -1.473719  #> = Starting epoch 64  #> Test loss: -1.706827  #> = Starting epoch 65  #> Test loss: -1.747355  #> = Starting epoch 66  #> Test loss: -1.528199  #> = Starting epoch 67  #> Test loss: -1.799287  #> = Starting epoch 68  #> Test loss: -1.454814  #> = Starting epoch 69  #> Test loss: -1.649646  #> = Starting epoch 70  #> Test loss: -1.589585  #> = Starting epoch 71  #> Test loss: -1.861684  #> = Starting epoch 72  #> Test loss: -1.503552  #> = Starting epoch 73  #> Test loss: -1.853857  #> = Starting epoch 74  #> Test loss: -1.619069  #> = Starting epoch 75  #> Test loss: -1.726446  #> = Starting epoch 76  #> Test loss: -1.87603  #> = Starting epoch 77  #> Test loss: -1.655491  #> = Starting epoch 78  #> Test loss: -1.897882  #> = Starting epoch 79  #> Test loss: -1.723879  #> = Starting epoch 80  #> Test loss: -1.826673  #> = Starting epoch 81  #> Test loss: -1.919089  #> = Starting epoch 82  #> Test loss: -1.82856  #> = Starting epoch 83  #> Test loss: -1.943498  #> = Starting epoch 84  #> Test loss: -1.828851  #> = Starting epoch 85  #> Test loss: -1.991504  #> = Starting epoch 86  #> Test loss: -1.90132  #> = Starting epoch 87  #> Test loss: -2.02227  #> = Starting epoch 88  #> Test loss: -1.92182  #> = Starting epoch 89  #> Test loss: -2.027404  #> = Starting epoch 90  #> Test loss: -1.968076  #> = Starting epoch 91  #> Test loss: -2.044124  #> = Starting epoch 92  #> Test loss: -1.988737  #> = Starting epoch 93  #> Test loss: -2.055724  #> = Starting epoch 94  #> Test loss: -2.052669  #> = Starting epoch 95  #> Test loss: -2.07023  #> = Starting epoch 96  #> Test loss: -2.055299  #> = Starting epoch 97  #> Test loss: -2.08232  #> = Starting epoch 98  #> Test loss: -2.109036  #> = Starting epoch 99  #> Test loss: -2.088024  #> = Starting epoch 100  #> Test loss: -2.117761  #> = Starting epoch 101  #> Test loss: -2.136129  #> = Starting epoch 102  #> Test loss: -2.099205  #> = Starting epoch 103  #> Test loss: -2.152022  #> = Starting epoch 104  #> Test loss: -2.126414  #> = Starting epoch 105  #> Test loss: -2.064301  #> = Starting epoch 106  #> Test loss: -2.175531  #> = Starting epoch 107  #> Test loss: -2.179707  #> = Starting epoch 108  #> Test loss: -2.099951  #> = Starting epoch 109  #> Test loss: -2.193306  #> = Starting epoch 110  #> Test loss: -2.197972  #> = Starting epoch 111  #> Test loss: -2.141914  #> = Starting epoch 112  #> Test loss: -2.208292  #> = Starting epoch 113  #> Test loss: -2.116034  #> = Starting epoch 114  #> Test loss: -2.047258  #> = Starting epoch 115  #> Test loss: -2.201024  #> = Starting epoch 116  #> Test loss: -2.110924  #> = Starting epoch 117  #> Test loss: -2.147749  #> = Starting epoch 118  #> Test loss: -2.210964  #> = Starting epoch 119  #> Test loss: -2.136377  #> = Starting epoch 120  #> Test loss: -2.182316  #> = Starting epoch 121  #> Test loss: -2.231335  #> = Starting epoch 122  #> Test loss: -2.182772  #> = Starting epoch 123  #> Test loss: -2.158815  #> = Starting epoch 124  #> Test loss: -2.256254  #> = Starting epoch 125  #> Test loss: -2.177521  #> = Starting epoch 126  #> Test loss: -2.239376  #> = Starting epoch 127  #> Test loss: -2.265131  #> = Starting epoch 128  #> Test loss: -2.271951 test_samples <- as_array(generate_from_conditional_flow(conditioning_flow, 1024, test_set$conditioning[1 : 4, , , drop = FALSE])) str(test_samples) #>  num [1:1024, 1:4, 1:2] 0.276 -0.472 -0.151 0.414 -0.389 ...  test_target <- as_array(test_set$target)  par(mfrow = c(4, 2)) for (i in 1 : 4) {   hist(exp(test_samples[, i, 1]), main = '', xlab = 'ell', freq = FALSE, breaks = 32, xlim = c(0, 2))   abline(v = exp(test_target[i, 1]), col = 'red')   hist(exp(test_samples[, i, 2]), main = '', xlab = 'sigma', freq = FALSE, breaks = 32, xlim = c(0, 3))   abline(v = exp(test_target[i, 2]), col = 'red') } par(mfrow = c(2, 2)) for (i in 1 : 4) {   plot(exp(test_samples[, i, 1]), exp(test_samples[, i, 2]), main = '', xlab = 'ell', ylab = 'sigma', xlim = c(0, 2), ylim = c(0, 3))   abline(v = exp(test_target[i, 1]), col = 'red')   abline(h = exp(test_target[i, 2]), col = 'red') }"},{"path":"https://mbertolacci.github.io/torchflow/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Bertolacci. Author, maintainer.","code":""},{"path":"https://mbertolacci.github.io/torchflow/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bertolacci M (2024). torchflow: Conditional Normalizing Flows. R package version 0.0.1, https://mbertolacci.github.io/torchflow/.","code":"@Manual{,   title = {torchflow: Conditional Normalizing Flows},   author = {Michael Bertolacci},   year = {2024},   note = {R package version 0.0.1},   url = {https://mbertolacci.github.io/torchflow/}, }"},{"path":"https://mbertolacci.github.io/torchflow/index.html","id":"torchflow","dir":"","previous_headings":"","what":"Conditional Normalizing Flows","title":"Conditional Normalizing Flows","text":"Normalizing flows R using torch package. Go read vignette package website: torchflow. Fill details .","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/forward_kl_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward KL Loss — forward_kl_loss","title":"Forward KL Loss — forward_kl_loss","text":"Compute forward KL loss flow model.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/forward_kl_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward KL Loss — forward_kl_loss","text":"","code":"forward_kl_loss(input)"},{"path":"https://mbertolacci.github.io/torchflow/reference/forward_kl_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward KL Loss — forward_kl_loss","text":"input output flow model, tensor dimensions [batch1, ..., batchN, d] batch1, ..., batchN dimensions batch d dimension input. must also attribute log_jacobian containing log determinant Jacobian transformation.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/forward_kl_loss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward KL Loss — forward_kl_loss","text":"","code":"library(torch) flow_model <- nn_sequential_conditional_flow(   nn_affine_coupling_block(2, 0),   nn_permutation_flow(2),   nn_affine_coupling_block(2, 0) ) x <- torch_randn(10, 2) y <- flow_model(x) loss <- forward_kl_loss(y)"},{"path":"https://mbertolacci.github.io/torchflow/reference/generate_from_conditional_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate samples from a conditional flow model — generate_from_conditional_flow","title":"Generate samples from a conditional flow model — generate_from_conditional_flow","text":"function generates samples conditional flow model. conditioning provided, n_samples_per_batch samples generated batch conditioning variable. conditioning provided, n_samples_per_batch samples generated.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/generate_from_conditional_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate samples from a conditional flow model — generate_from_conditional_flow","text":"","code":"generate_from_conditional_flow(model, n_samples_per_batch, conditioning)"},{"path":"https://mbertolacci.github.io/torchflow/reference/generate_from_conditional_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate samples from a conditional flow model — generate_from_conditional_flow","text":"model conditional flow model. n_samples_per_batch number samples generate batch conditioning variable, total number samples conditioning provided. conditioning conditioning variable, torch tensor dimensions [batch, ...] batch dimension batch ... dimensions conditioning variable.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_affine_coupling_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Affine Coupling Block — nn_affine_coupling_block","title":"Affine Coupling Block — nn_affine_coupling_block","text":"affine coupling block conditional flow inheriting nn_conditional_flow() applies following transformation input.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_affine_coupling_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affine Coupling Block — nn_affine_coupling_block","text":"","code":"nn_affine_coupling_block(   input_size,   conditioning_size = 0,   left_size = as.integer(input_size%/%2),   f_scale,   f_shift,   g_scale,   g_shift,   soft_clamp = 1.9 )"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_affine_coupling_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affine Coupling Block — nn_affine_coupling_block","text":"input_size dimension input. input tensor dimensions [batch_size, input_size], just [input_size] batch dimension. conditioning_size dimension conditioning input, batch dimensions input. left_size dimension left part input (split \\(x_1\\) equations ). f_scale function \\(f_\\text{scale}\\) equations . , following parameters, default conditional multi-layer perceptron (MLP); see nn_conditional_mlp(). must inherit nn_conditional(). f_shift function \\(f_\\text{shift}\\) equations ; see . g_scale function \\(g_\\text{scale}\\) equations ; see . g_shift function \\(g_\\text{shift}\\) equations ; see . soft_clamp soft clamp value scale parameters.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_affine_coupling_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Affine Coupling Block — nn_affine_coupling_block","text":"Let \\(x = (x_1, x_2)\\) split input two parts, let \\(u\\) conditioning input. forward transformation given : $$   y_1 = x_1 \\exp(f_\\text{scale}(x_2, u)) + f_\\text{shift}(x_2, u)   y_2 = x_2 \\exp(g_\\text{scale}(y_1, u)) + g_\\text{shift}(y_1, u) $$ inverse transformation given : $$   x_1 = y_1 \\exp(g_\\text{scale}(y_2, u)) + g_\\text{shift}(y_2, u)   x_2 = y_2 \\exp(f_\\text{scale}(x_1, u)) + f_\\text{shift}(x_1, u) $$ log determinant Jacobian transformation given : $$   \\log | \\det \\frac{\\partial y}{\\partial x} |    = \\sum_{=1}^2 f_\\text{scale}(x_i, u) + g_\\text{scale}(y_i, u) $$ performing multiple transformations sequence, can construct complex normalizing flow capable modeling complicated conditional distributions. pair transformations, dimensions input permuted using nn_permutation_flow().","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_affine_coupling_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Affine Coupling Block — nn_affine_coupling_block","text":"","code":"library(torch) # Coupling block used on its own with no conditioning flow_model <- nn_affine_coupling_block(2, 0) x <- torch_randn(10, 2) y <- flow_model(x) # y will be a tensor of dimensions [10, 2] x_recovered <- flow_model$reverse(y) # x_recovered will be a tensor of dimensions [10, 2] # and numerically close to the original x  # Coupling block used with conditioning flow_model <- nn_affine_coupling_block(2, 4) x <- torch_randn(10, 2) u <- torch_randn(10, 4) y <- flow_model(x, u) # y will be a tensor of dimensions [10, 2] x_recovered <- flow_model$reverse(y, u) # x_recovered will be a tensor of dimensions [10, 2] # and numerically close to the original x  # Coupling block used as part of a more complex flow model flow_model <- nn_sequential_conditional_flow(   nn_affine_coupling_block(2, 4),   nn_permutation_flow(2),   nn_affine_coupling_block(2, 4) ) y <- flow_model(x, u)"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Module — nn_conditional","title":"Conditional Module — nn_conditional","text":"conditional module module takes additional conditioning input forward pass.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Module — nn_conditional","text":"","code":"nn_conditional()"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional.html","id":"forward-method","dir":"Reference","previous_headings":"","what":"Forward method","title":"Conditional Module — nn_conditional","text":"forward method take two arguments, input conditioning, return output. Example:","code":"forward = function(input, conditioning) {   output <- ...   output }"},{"path":[]},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Normalizing Flow — nn_conditional_flow","title":"Conditional Normalizing Flow — nn_conditional_flow","text":"conditional normalizing flow normalizing flow takes additional conditioning input. module provides base class conditional normalizing flows.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Normalizing Flow — nn_conditional_flow","text":"","code":"nn_conditional_flow()"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional_flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional Normalizing Flow — nn_conditional_flow","text":"base class, nn_conditional_flow, abstract class provides forward reverse method, well dimension method. Subclasses created torch::nn_module() implement methods. class subclass torch::nn_module(), inherits methods semantics.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional_flow.html","id":"forward-method","dir":"Reference","previous_headings":"","what":"Forward method","title":"Conditional Normalizing Flow — nn_conditional_flow","text":"forward method return output log determinant Jacobian attribute log_jacobian. Example:","code":"forward = function(input, conditioning) {   output <- ...   attr(output, 'log_jacobian') <- ...   output }"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional_flow.html","id":"reverse-method","dir":"Reference","previous_headings":"","what":"Reverse method","title":"Conditional Normalizing Flow — nn_conditional_flow","text":"reverse method return inverse output, need implement log determinant. Example:","code":"reverse = function(input, conditioning) {   output <- ...   output }"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional_flow.html","id":"dimension-method","dir":"Reference","previous_headings":"","what":"Dimension method","title":"Conditional Normalizing Flow — nn_conditional_flow","text":"dimension method return dimension input output flow. Example:","code":"dimension = function() {   return(2) }"},{"path":[]},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional_mlp.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Multilayer Perceptron — nn_conditional_mlp","title":"Conditional Multilayer Perceptron — nn_conditional_mlp","text":"conditional multilayer perceptron multilayer perceptron takes additional conditioning input. inherits nn_conditional(); normalizing flow. practice, regular input conditioning input concatenated passed MLP.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional_mlp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Multilayer Perceptron — nn_conditional_mlp","text":"","code":"nn_conditional_mlp(   input_size,   conditioning_size,   output_size,   layer_sizes = c(128, 128),   activation = nn_relu )"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional_mlp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Multilayer Perceptron — nn_conditional_mlp","text":"input_size size input MLP. conditioning_size size conditioning input MLP. output_size size output MLP. layer_sizes vector integers specifying number neurons layer. can NULL, case single linear layer used. activation activation function use layer.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_conditional_mlp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Multilayer Perceptron — nn_conditional_mlp","text":"","code":"library(torch) mlp <- nn_conditional_mlp(10, 5, 1) input <- torch_randn(10) conditioning <- torch_randn(5) output <- mlp(input, conditioning)"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_permutation_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Flow — nn_permutation_flow","title":"Permutation Flow — nn_permutation_flow","text":"permutation flow conditional flow inheriting nn_conditional_flow() permutes input dimensions. permutation fixed random permutation initialization change. log Jacobian zero since simple reordering input dimensions.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_permutation_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Flow — nn_permutation_flow","text":"","code":"nn_permutation_flow(input_size)"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_permutation_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Flow — nn_permutation_flow","text":"input_size size input flow.","code":""},{"path":[]},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_permutation_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation Flow — nn_permutation_flow","text":"","code":"library(torch) # Use on its own permutation_flow <- nn_permutation_flow(10) input <- torch_randn(10) output <- permutation_flow(input) # Use in a more complex conditional flow flow_model <- nn_sequential_conditional_flow(   nn_affine_coupling_block(10, 5),   nn_permutation_flow(10),   nn_affine_coupling_block(10, 5) )"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_sequential_conditional_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential Conditional Flow — nn_sequential_conditional_flow","title":"Sequential Conditional Flow — nn_sequential_conditional_flow","text":"sequential conditional flow conditional flow inheriting nn_conditional_flow() applies sequence conditional flows, passing conditioning input flow. analog torch::nn_sequential() conditional flows.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_sequential_conditional_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential Conditional Flow — nn_sequential_conditional_flow","text":"","code":"nn_sequential_conditional_flow(...)"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_sequential_conditional_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequential Conditional Flow — nn_sequential_conditional_flow","text":"... sequence conditional flows, list conditional flows.","code":""},{"path":[]},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_sequential_conditional_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequential Conditional Flow — nn_sequential_conditional_flow","text":"","code":"flow_model <- nn_sequential_conditional_flow(   nn_affine_coupling_block(10, 5),   nn_permutation_flow(10),   nn_affine_coupling_block(10, 5) )"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_summarizing_conditional_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing Conditional Flow — nn_summarizing_conditional_flow","title":"Summarizing Conditional Flow — nn_summarizing_conditional_flow","text":"summarizing conditional flow conditional flow summarizes conditioning input using summary model. inherits nn_conditional_flow(), requires summary_model flow_model initializer. forward pass, summary model applied conditioning input, result passed flow model. can used reduce dimensionality conditioning input.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_summarizing_conditional_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing Conditional Flow — nn_summarizing_conditional_flow","text":"","code":"nn_summarizing_conditional_flow(summary_model, flow_model)"},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_summarizing_conditional_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing Conditional Flow — nn_summarizing_conditional_flow","text":"summary_model torch::nn_module() summarizes conditioning input. flow_model torch::nn_module() conditional flow.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_summarizing_conditional_flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarizing Conditional Flow — nn_summarizing_conditional_flow","text":"forward() method optional summary argument. summary provided, used conditioning input flow model, skipping application summary model. can used speed forward pass conditioning input used multiple times. class also provides summarize() method can used compute summary conditioning input outside forward pass.","code":""},{"path":[]},{"path":"https://mbertolacci.github.io/torchflow/reference/nn_summarizing_conditional_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing Conditional Flow — nn_summarizing_conditional_flow","text":"","code":"library(torch) summary_model <- nn_sequential(   nn_linear(10, 5),   nn_relu() ) flow_model <- nn_affine_coupling_block(10, 5) summarizing_flow <- nn_summarizing_conditional_flow(summary_model, flow_model)"},{"path":"https://mbertolacci.github.io/torchflow/reference/torchflow-package.html","id":null,"dir":"Reference","previous_headings":"","what":"torchflow: Conditional Normalizing Flows — torchflow-package","title":"torchflow: Conditional Normalizing Flows — torchflow-package","text":"package fit conditional normalizing flows.","code":""},{"path":[]},{"path":"https://mbertolacci.github.io/torchflow/reference/torchflow-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"torchflow: Conditional Normalizing Flows — torchflow-package","text":"Maintainer: Michael Bertolacci m.bertolacci@gmail.com (ORCID)","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/train_conditional_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a conditional flow model — train_conditional_flow","title":"Train a conditional flow model — train_conditional_flow","text":"Method train conditional flow model. basic training loop following steps:","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/train_conditional_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a conditional flow model — train_conditional_flow","text":"","code":"train_conditional_flow(   model,   generate,   optimizer = torch::optim_adam,   n_epochs = 128,   batch_size = 32,   after_epoch = NULL,   verbose = TRUE,   ... )"},{"path":"https://mbertolacci.github.io/torchflow/reference/train_conditional_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a conditional flow model — train_conditional_flow","text":"model conditional flow model inheriting nn_conditional_flow(). generate function generates batch target conditioning samples; see details. passed current epoch number argument. optimizer optimizer use, e.g. torch::optim_adam(). n_epochs number epochs train . batch_size batch size. after_epoch function call epoch. verbose Whether print progress. ... Additional arguments pass optimizer.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/train_conditional_flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Train a conditional flow model — train_conditional_flow","text":"training algorithm follows. epoch: Generate (using generate) batch target conditioning samples. Loop batches epoch, performing gradient descent step batch. batches processed order generated samples. Call after_epoch (provided) current epoch generated samples. can used print test loss tasks. generate function (called current epoch number argument) return list following elements: target: array(), matrix(), torch::torch_tensor() target samples. conditioning: optional array(), matrix(), torch::torch_tensor() conditioning samples. returning torch_tensor() objects, take care device model. generated samples choice user. generate new samples epoch, share samples across epochs (noting model may overfit case). latter case, good permute order samples epoch. training may stopped early. original model object modified place.","code":""},{"path":"https://mbertolacci.github.io/torchflow/reference/train_conditional_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a conditional flow model — train_conditional_flow","text":"","code":"library(torch) model <- nn_sequential_conditional_flow(   nn_affine_coupling_block(input_size = 2),   nn_permutation_flow(input_size = 2),   nn_affine_coupling_block(input_size = 2) ) generate <- function(epoch) {   list(target = 2 + torch_randn(1024, 2)) } # In practice, the number of epochs should be larger train_conditional_flow(model, generate, n_epochs = 2) #> = Starting epoch 1  #> = Starting epoch 2"}]
